package com.tpos.soss.member.excelupload;

import java.io.File;
import java.io.FileInputStream;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nhncorp.lucy.security.xss.XssPreventer;
import com.tpos.soss.admin.codes.CodesService;
import com.tpos.soss.admin.codes.CodesVO;
import com.tpos.soss.admin.memer.MemberService;
import com.tpos.soss.admin.memer.MemberVO;
import com.tpos.soss.member.blacklist.BlackListService;
import com.tpos.soss.member.blacklist.BlackListVO;
import com.tpos.soss.member.exceptionlist.ExceptionListService;
import com.tpos.soss.member.exceptionlist.ExceptionListVO;
import com.tpos.soss.member.monitoring.ddosblock.DDoSBlockVO;
import com.tpos.soss.member.monitoring.exceptionrequest.ExceptionRequestVO;
import com.tpos.soss.member.rule.status.RuleStatusVO;
import com.tpos.soss.member.tickets.TicketsVO;
import com.tpos.soss.qradar.data.SiemOffenseVO;
import com.tpos.soss.util.ValueCheckUtil;

@Service
public class ExcelUploadService {

	private static final Logger logger = LoggerFactory.getLogger(ExcelUploadService.class);

	@Autowired
	private ExcelUploadDAO excelUploadDao;

	@Autowired
	private CodesService codesService;
	
	@Autowired
	private ValueCheckUtil valueCheckUtil;
	
	@Autowired
	private BlackListService blackListService;
	
	@Autowired
	private ExceptionListService exceptionListService;
	
	@Autowired
	private MemberService memberService;
	
	//날짜 포맷 설정
	private final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");

	// offense 엑셀로 등록
	public int insertOffense(List<SiemOffenseVO> list) throws Exception {
		return excelUploadDao.insertOffense(list);
	}

	// 티켓팅 관리대장 엑셀로 등록(오펜스)
	public int insertOffense(TicketsVO input) throws Exception {
		return excelUploadDao.insertOffense(input);
	}

	// 티켓팅 관리대장 엑셀로 등록(티켓)
	public int insertTickets(TicketsVO input) throws Exception {
		return excelUploadDao.insertTickets(input);
	}

	// 티켓팅 관리대장 엑셀로 등록(티켓팅)
	public int insertTicketing(TicketsVO input) throws Exception {
		return excelUploadDao.insertTicketing(input);
	}

	// 유형별 룰 적용 현황 엑셀로 등록
	public int insertRule(List<RuleStatusVO> list) throws Exception {
		return excelUploadDao.insertRule(list);
	}
	
	// 블랙리스트 IP 등록 (엑셀로)
	public int insertBlacklistIp(List<BlackListVO> list) throws Exception {
		return excelUploadDao.insertBlacklistIp(list);
	}
	
	// 블랙리스트 URL 등록 (엑셀로)
	public int insertBlacklistUrl(List<BlackListVO> list) throws Exception {
		return excelUploadDao.insertBlacklistUrl(list);
	}
	
	// 블랙리스트 Mail 등록 (엑셀로)
	public int insertBlacklistMail(List<BlackListVO> list) throws Exception {
		return excelUploadDao.insertBlacklistMail(list);
	}
	
	// 화이트리스트 IP 등록 (엑셀로)
	public int insertWhitelistIp(List<ExceptionListVO> list) throws Exception {
		return excelUploadDao.insertWhitelistIp(list);
	}
	
	// 화이트리스트 URL 등록 (엑셀로)
	public int insertWhitelistUrl(List<ExceptionListVO> list) throws Exception {
		return excelUploadDao.insertWhitelistUrl(list);
	}
	
	// 화이트리스트 Mail 등록 (엑셀로)
	public int insertWhitelistMail(List<ExceptionListVO> list) throws Exception {
		return excelUploadDao.insertWhitelistMail(list);
	}
	
	// 예외 신청 현황 등록 (엑셀로)
	public int insertExceptionrequest(List<ExceptionRequestVO> list) throws Exception {
		return excelUploadDao.insertExceptionrequest(list);
	}
	
	// DDoS 차단 현황 등록 (엑셀로)
	public int insertDdosblock(List<DDoSBlockVO> list) throws Exception {
		return excelUploadDao.insertDdosblock(list);
	}

	// xls, xlsx 변환
	public XSSFWorkbook convertXlsToXlsx(File file) throws Exception {

		HSSFWorkbook hssfWorkbook = new HSSFWorkbook(new FileInputStream(file));
		XSSFWorkbook xssfWorkbook = new XSSFWorkbook();

		try {
			int sheetCnt = hssfWorkbook.getNumberOfSheets();
			for (int i = 0; i < sheetCnt; i++) {
				Sheet sIn = hssfWorkbook.getSheetAt(i);
				Sheet sOut = xssfWorkbook.createSheet(sIn.getSheetName());

				Iterator<Row> rowIt = sIn.rowIterator();
				while (rowIt.hasNext()) {
					Row rowIn = (Row) rowIt.next();
					Row rowOut = sOut.createRow(rowIn.getRowNum());

					Iterator<Cell> cellIt = rowIn.cellIterator();
					while (cellIt.hasNext()) {
						Cell cellIn = (Cell) cellIt.next();
						Cell cellOut = rowOut.createCell(cellIn.getColumnIndex(), cellIn.getCellType());

						switch (cellIn.getCellTypeEnum()) {
						case _NONE:
							break;
						case BLANK:
							break;
						case BOOLEAN:
							cellOut.setCellValue(cellIn.getBooleanCellValue());
							break;
						case ERROR:
							cellOut.setCellValue(cellIn.getErrorCellValue());
							break;
						case FORMULA:
							cellOut.setCellValue(cellIn.getCellFormula());
							break;
						case NUMERIC:
							cellOut.setCellValue(cellIn.getNumericCellValue());
							break;
						case STRING:
							cellOut.setCellValue(cellIn.getStringCellValue());
							break;
						}

						CellStyle styleIn = cellIn.getCellStyle();
						CellStyle styleOut = cellOut.getCellStyle();
						styleOut.setDataFormat(styleIn.getDataFormat());

						cellOut.setCellComment(cellIn.getCellComment());
					}
				}
			}
			return xssfWorkbook;

		} catch (Exception e) {
			xssfWorkbook.close();
			logger.error(e.getMessage(), e);
			return null;
		}
	}

	// 오펜스 엑셀 파일 업로드
	public List<SiemOffenseVO> dataToListOffense(File file) {

		// 파일 데이터 담기
		List<SiemOffenseVO> uploadFileList = new ArrayList<SiemOffenseVO>();

		try {
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			for (int j = 0; j < workbook.getNumberOfSheets(); j++) {

				XSSFSheet sheet = workbook.getSheetAt(j);

				for (int i = 4; i < sheet.getLastRowNum() + 1; i++) {
					SiemOffenseVO vo = new SiemOffenseVO();
					XSSFRow row = sheet.getRow(i);

					// 행이 존재하기 않으면 패스
					if (row == null) {
						continue;
					}

					// 오펜스 발생일시
					cell = row.getCell(1);
					value = getCellValue(cell);
					if (value != null && StringUtils.isNoneEmpty(value)) {
						// vo.setDetectedtime(Long.parseLong(value));
					}

					// source IP
					cell = row.getCell(2);
					value = getCellValue(cell);
					if (value != null && StringUtils.isNoneEmpty(value)) {
					}

					// 오펜스 아이디
					cell = row.getCell(3);
					value = getCellValue(cell);
					if (value != null && StringUtils.isNoneEmpty(value)) {
						vo.setOffenseid(Long.parseLong(value));
					}

					// 오펜스 이름
					cell = row.getCell(4);
					value = getCellValue(cell);
					if (value != null && StringUtils.isNoneEmpty(value)) {
						vo.setDescription(value);
					}

					// 조치
					// cell = row.getCell(5);
					// value = getCellValue(cell);
					// if (value != null && StringUtils.isNoneEmpty(value)) {
					// vo.setDescriptiondesc(value);
					// }

					// 완료 일정
					cell = row.getCell(6);
					value = getCellValue(cell);
					if (value != null && StringUtils.isNoneEmpty(value)) {
						vo.setClosetime(Long.parseLong(value));
					}

					// 완료 여부
					cell = row.getCell(7);
					value = getCellValue(cell);
					if (value != null && StringUtils.isNoneEmpty(value)) {
					}

					// 비고
					cell = row.getCell(8);
					value = getCellValue(cell);
					if (value != null && StringUtils.isNoneEmpty(value)) {
					}

					if (vo.getOffenseid() != 0) {
						uploadFileList.add(vo);
					}
				}
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}

	// 티켓팅 관리대장 엑셀 파일 업로드
	public List<TicketsVO> dataToListTicketing(File file) {
		// 파일 데이터 담기
		List<TicketsVO> list = new ArrayList<TicketsVO>();

		try {
			String rules = null;
			String [] rulesSplit = null;
			String area = null;
			
			// 코드 조회
			List<CodesVO> codeList = codesService.selectAllCodes();
			Map<String, String> codeMap = new HashMap<String, String>();
			Map<String, String> areaMap = new HashMap<String, String>();
			Map<String, String> areadetailMap = new HashMap<String, String>();
			Map<String, String> usageMap = new HashMap<String, String>();
			
			// 코드 추가(2021-09-10)
			List<String> categoryList = Arrays.asList("TMWF", "TMD", "TMS", "TMAT", "TMU", "TMA", "TMA01SUB", "TMA02SUB", "TMA03SUB", "TMA04SUB", "TMA05SUB");
			List<String> subCodeList = Arrays.asList("TMA01SUB01", "TMA01SUB02", "TMA01SUB03", "TMA02SUB01", "TMA02SUB02", "TMA02SUB03", "TMA03SUB01", "TMA03SUB02", "TMA03SUB03", "TMA04SUB01", "TMA04SUB02", "TMA04SUB03", "TMA05SUB01", "TMA05SUB02");
			
			for(int i=0; i<codeList.size(); i++) {
				if(categoryList.contains(codeList.get(i).getCategory())) {
					// 지역
					if(codeList.get(i).getCategory().equals("TMA")) {
						areaMap.put(codeList.get(i).getName().replaceAll(" ", ""), codeList.get(i).getCode());
					}
					// 지역 상세, 물리적망
					else if(subCodeList.contains(codeList.get(i).getCode())) {
						areadetailMap.put((codeList.get(i).getNote()+codeList.get(i).getName()).replaceAll(" ", ""), codeList.get(i).getCode());
					}
					// 용도별망
					else if(codeList.get(i).getCategory().equals("TMU")) {
						usageMap.put(codeList.get(i).getName().replaceAll(" ", ""), codeList.get(i).getCode());
					}
					else {
						codeMap.put(codeList.get(i).getName().replaceAll(" ", ""), codeList.get(i).getCode());
					}
				}
			}
			
			// 멤버 조회
			List<MemberVO> memberList = memberService.selectList(new MemberVO());
			Map<String, String> memberMap = new HashMap<String, String>();
			for(int i=0; i<memberList.size(); i++) {
				memberMap.put(memberList.get(i).getName(), memberList.get(i).getId());
			}
			

			TicketsVO ticketsvo = new TicketsVO();
			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;
			String valData = null;

			for (int j = 0; j < workbook.getNumberOfSheets(); j++) {
				XSSFSheet sheet = workbook.getSheetAt(j);

				for (int i = 1; i < sheet.getLastRowNum() + 1; i++) {
					XSSFRow row = sheet.getRow(i);
					ticketsvo = new TicketsVO();
					ticketsvo.setIsauto("N");

					// 행이 존재하기 않으면 패스
					if (row == null) {
						continue;
					}
					
					// 지역명
					area = null;
					
					// 열 반복 (n==0: 탐지 ID)
					for(int n=1; n<41; n++) {
						cell = row.getCell(n);
						value = getCellValue(cell);
						
						if(n == 1) {	// 오펜스 ID
							ticketsvo.setOffenseid(0);
							try {
								ticketsvo.setOffenseid(Long.parseLong(value));
							}
							catch(Exception e) {}
						}
						else if(n == 2) {	// 티켓명
							ticketsvo.setTicketingname(value);
						}
						else if(n == 3) {	// 탐지 시간
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								ticketsvo.setDetecteddate(value);
							}
						}
						else if(n == 4) {	// Src IP
							ticketsvo.setSrcipinfo(value);
						}
						else if(n == 5) {	// Src Nation
							ticketsvo.setSrcnationinfo(value);
						}
						else if(n == 6) {	// Src Port
							ticketsvo.setSrcportinfo(value);
						}
						else if(n == 7) {	// Dst IP
							ticketsvo.setDstipinfo(value);
						}
						else if(n == 8) {	// Dst Nation
							ticketsvo.setDstnationinfo(value);
						}
						else if(n == 9) {	// Dst Port
							ticketsvo.setDstportinfo(value);
						}
						else if(n == 10) {	// 탐지 장비명
							ticketsvo.setDetectiondevice(value);
						}
						else if(n == 11) {	// 위협 유형(공격 유형)
							if(StringUtils.isNoneEmpty(value)) {
								valData = value.replaceAll(" ", "");
								if(codeMap.containsKey(valData)) {
									ticketsvo.setAttacktypecode(codeMap.get(valData));
								}
							}
						}
						else if(n == 12) {	// 오펜스 소스
							ticketsvo.setOffensesource(value);							
						}
						else if(n == 13) {	// 탐지명
							ticketsvo.setDescription(value);
							ticketsvo.setDetectioneventname(value);
						}
						else if(n == 14) {	// 탐지정책
							if(StringUtils.isNoneEmpty(value)) {
								rulesSplit = value.split(",");
								rules = null;
								for(int z=0; z<rulesSplit.length; z++) {
									if(rules == null) {
										//[{"name":"[SOC]NS_CiscoIPS_SQL 인젝션 탐지","id":1234}]
										rules = "[{\"name\":\"" + rulesSplit[z].trim() + "\",\"id\":0}";
									}
									else {
										rules = ",{\"name\":\"" + rulesSplit[z].trim() + "\",\"id\":0}";
									}
								}								
								rules+="]";
								
								ticketsvo.setRules(rules);
							}
						}
						// 수정내용 13번
						else if(n == 15) {	// 탐지 조건
							ticketsvo.setDetectionsignature(value);
						}
						else if(n == 16) {	// 이벤트 수
							try {
								ticketsvo.setEventcount(Long.parseLong(value));
							}
							catch(Exception e) {}
						}
						else if(n == 17) {	// 탐지 구분
							if(StringUtils.isNoneEmpty(value)) {
								valData = value.replaceAll(" ", "");
								if(codeMap.containsKey(valData)) {
									ticketsvo.setDetectioncode(codeMap.get(valData));
								}
							}
						}
						else if(n == 18) {	// 분석 내용(Qradar Note)
							ticketsvo.setQradardesc(value);
						}
						else if(n == 19) {	// 조치 및 권고사항
							ticketsvo.setActiondesc(value);
						}
						else if(n == 20) {	// 상태
							if(StringUtils.isNoneEmpty(value)) {
								valData = value.replaceAll(" ", "");
								if(codeMap.containsKey(valData)) {
									ticketsvo.setStepcode(codeMap.get(valData));
								}
							}
						}
						else if(n == 21) {	// 지역
							if(StringUtils.isNoneEmpty(value)) {
								valData = value.replaceAll(" ", "");
								if(areaMap.containsKey(valData)) {
									area = valData;
									ticketsvo.setAreacode(areaMap.get(valData));
								}
							}
						}
						else if(n == 22) {	// 물리적망
							if(StringUtils.isNoneEmpty(value)) {
								if(StringUtils.isNoneEmpty(area)) {
									valData = (area + value).replaceAll(" ", "");
									if(areadetailMap.containsKey(valData)) {
										ticketsvo.setAreadetailcode(areadetailMap.get(valData));
									}
								}
							}
						}
						else if(n == 23) {	// 용도별망
							if(StringUtils.isNoneEmpty(value)) {
								valData = value.replaceAll(" ", "");
								if(usageMap.containsKey(valData)) {
									ticketsvo.setUsagecode(usageMap.get(valData));
								}
							}
						}
						else if(n == 24) {	// 긴급도
							if(StringUtils.isNoneEmpty(value)) {
								valData = value.replaceAll(" ", "");
								if(codeMap.containsKey(valData)) {
									ticketsvo.setSeveritycode(codeMap.get(valData));
								}
							}
						}
						else if(n == 25) {	// 접수 시간
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								ticketsvo.setAssigndate(value);
							}
						}
						else if(n == 26) {	// 검토 요청 시간
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								ticketsvo.setAnalysisdate(value);
							}
						}
						else if(n == 27) {	// 접수자
							if(memberMap.containsKey(value)) {
								ticketsvo.setAssignid(memberMap.get(value));
							}
							else {
								ticketsvo.setAssignid(value);
							}
						}
						else if(n == 28) {}	// 검토 요청자 = 접수자
						else if(n == 29) {	// 검토자
							if(memberMap.containsKey(value)) {
								ticketsvo.setReviewid(memberMap.get(value));
							}
							else {
								ticketsvo.setReviewid(value);
							}
						}
						else if(n == 30) {	// 검토 날짜
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								ticketsvo.setReviewdate(value);
							}
						}
						else if(n == 31) {	// 검토 내용
							ticketsvo.setReviewdesc(value);
						}
						else if(n == 32) {	// 검토 반려자
							if(memberMap.containsKey(value)) {
								ticketsvo.setReviewreturnid(memberMap.get(value));
							}
							else {
								ticketsvo.setReviewreturnid(value);
							}
						}
						else if(n == 33) {	// 검토 반려 날짜
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								ticketsvo.setReviewreturndate(value);
							}
						}
						else if(n == 34) {	// 검토 반려 사유
							ticketsvo.setReviewreturnreason(value);
						}
						else if(n == 35) {	// 승인자
							if(memberMap.containsKey(value)) {
								ticketsvo.setCloseid(memberMap.get(value));
							}
							else {
								ticketsvo.setCloseid(value);
							}
						}
						else if(n == 36) {	// 승인 날짜
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								ticketsvo.setClosedate(value);
							}
						}
						else if(n == 37) {	// 승인 사유
							ticketsvo.setClosingreason(value);
						}
						else if(n == 38) {	// 승인 반려자
							if(memberMap.containsKey(value)) {
								ticketsvo.setReturnid(memberMap.get(value));
							}
							else {
								ticketsvo.setReturnid(value);
							}
						}
						else if(n == 39) {	// 승인 반려 날짜
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								ticketsvo.setReturndate(value);
							}
						}
						else if(n == 40) {	// 승인 반려 사유
							ticketsvo.setReturnreason(value);
						}
					}
					
					list.add(ticketsvo);
				}
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}

		return list;
	}

	// 룰 현황 엑셀 업로드
	public List<RuleStatusVO> dataToListRulestatus(File file) {
		// 파일 데이터 담기
		List<RuleStatusVO> uploadFileList = new ArrayList<RuleStatusVO>();

		try {
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);
			
			// 코드 항목 가져오기
			CodesVO codeVo = new CodesVO();
			codeVo.setCategory("TMAT");
			List<CodesVO> codeList = codesService.selectList(codeVo);
			
			Map<String, String> codeNameMap = new HashMap<String, String>();
			String name = null;
			for(int i=0; i<codeList.size(); i++) {
				name = codeList.get(i).getName().replaceAll(" ", "");
				codeNameMap.put(name, codeList.get(i).getCode());
			}

			int size = sheet.getLastRowNum();

			for (int i = 1; i <= size; i++) {
				RuleStatusVO vo = new RuleStatusVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}

				// 사용여부
				cell = row.getCell(0);
				value = getCellValue(cell);
				if (value != null && StringUtils.isNoneEmpty(value)) {
					vo.setIsuse(value);
				}

				// 생성 일시
				cell = row.getCell(1);
				value = getCellValue(cell);
				if (value != null && StringUtils.isNoneEmpty(value)) {
					vo.setMakedate(value);
				}

				// 장비
				cell = row.getCell(2);
				value = getCellValue(cell);
				if (value != null && StringUtils.isNoneEmpty(value)) {					
					if(value.toLowerCase().trim().equals("esm")) {
						value = "ESM";
					}
					else if(value.toLowerCase().trim().equals("cisco")) {
						value = "CISCO";
					}
					else if(value.toLowerCase().trim().equals("wins")) {
						value = "Wins";
					}
					else if(value.toLowerCase().trim().equals("waf")) {
						value = "WAF";
					}
					else if(value.toLowerCase().trim().equals("apt")) {
						value = "APT";
					}
					
					vo.setDevice(value);
				}

				// 구분
				cell = row.getCell(3);
				value = getCellValue(cell);
				if (value != null && StringUtils.isNoneEmpty(value)) {
					vo.setDivision(value);
				}

				// 정책 유형
				cell = row.getCell(4);
				value = getCellValue(cell);
				if (value != null && StringUtils.isNoneEmpty(value)) {
					vo.setPolicy(value);
				}

				// 위협 유형
				cell = row.getCell(5);
				value = getCellValue(cell);
				if(StringUtils.isNoneEmpty(value) && codeNameMap.containsKey(value.replaceAll(" ", ""))) {
					vo.setAttacktypecode(codeNameMap.get(value.replaceAll(" ", "")));
				}

				// 탐지 정책
				cell = row.getCell(6);
				value = getCellValue(cell);
				if (value != null && StringUtils.isNoneEmpty(value)) {
					vo.setTitle(value);
				}

				// 생성 내용
				cell = row.getCell(7);
				value = getCellValue(cell);
				if (value != null && StringUtils.isNoneEmpty(value)) {
					vo.setMakecontent(value);
				}
				
				uploadFileList.add(vo);
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// 블랙리스트 IP 엑셀 파일 업로드
	public List<BlackListVO> dataToListBlacklistIp(File file) {
		// 파일 데이터 담기
		List<BlackListVO> uploadFileList = new ArrayList<BlackListVO>();
		BlackListVO vo = new BlackListVO();

		try {
			// 코드 항목 가져오기
			CodesVO codeVo = new CodesVO();
			codeVo.setCategory("TMAT");
			List<CodesVO> codeList = codesService.selectList(codeVo);
			
			Map<String, String> codeNameMap = new HashMap<String, String>();
			Map<String, String> categoryCodeNameMap = new HashMap<String, String>();
			String name = null;
			for(int i=0; i<codeList.size(); i++) {
				name = codeList.get(i).getName().replaceAll(" ", "");
				codeNameMap.put(name, codeList.get(i).getCode());
			}
			
			codeVo = new CodesVO();
			codeVo.setCategory("SOBT");
			codeList = codesService.selectList(codeVo);
			
			for(int i=0; i<codeList.size(); i++) {
				name = codeList.get(i).getName().replaceAll(" ", "");
				categoryCodeNameMap.put(name, codeList.get(i).getCode());
			}			
			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);

			int size = sheet.getLastRowNum();
			
			List<String> importIpList = new ArrayList<String>();
			
			for (int i = 1; i <= size; i++) {
				vo = new BlackListVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				for(int n=1; n<=8; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 적재 일시는 현재 시간 -> regdate 입력하도록
						if(n == 1) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								vo.setRegdate(value);
							}
						}
						
						// 위협 구분
						if(n == 2) {
							if(StringUtils.isNoneEmpty(value) && categoryCodeNameMap.containsKey(value.replaceAll(" ", ""))) {
								vo.setCategorycode(categoryCodeNameMap.get(value.replaceAll(" ", "")));
							}
						}
						// 위협 유형
						else if(n == 3) {
							if(StringUtils.isNoneEmpty(value) && codeNameMap.containsKey(value.replaceAll(" ", ""))) {
								vo.setAttacktypecode(codeNameMap.get(value.replaceAll(" ", "")));
							}
						}
						// IP
						else if(n == 4) {
							if(valueCheckUtil.ipCheck(value)) {
								vo.setIpurl(value);
							}
						}
						// 국가
						else if(n == 5) {
							vo.setNation(value);
						}
						// 사유
						else if(n == 6) {
							vo.setReason(value);
						}
						// 출처
						else if(n == 7) {
							vo.setSource(value);
						}
						// 티켓팅 여부
						else if(n == 8) {
							if(value.equals("Y") || value.equals("N")) {
								vo.setIsticketing(value);
							}
						}
						// 탐지 ID
						else if(n == 9) {
							if(vo.getIsticketing().equals("Y")) {
								try {
									vo.setTicketsidx(Integer.parseInt(value));
								}
								catch(Exception e) {}
							}
						}
					}
				}
				
				vo.setType("ip");
				
				// 이쪽 부분. 우선 8보다 작으면 날짜에서 하루 빼고 ipurl을 더해주면 될듯하다. 다른 좋은 방법 있을 지는 생각해봐야할 듯
				String tmpIp;
				if(Integer.parseInt(vo.getRegdate().split(" ")[1].substring(0, 2)) >= 8) {
					tmpIp = vo.getRegdate().split(" ")[0] + vo.getIpurl();
				} else {
					Date tmpDate = df.parse(vo.getRegdate().split(" ")[0]);
					Calendar cal = Calendar.getInstance();
					cal.setTime(tmpDate);
					cal.add(Calendar.DATE, -1);
					tmpIp = df.format(cal.getTime()) + vo.getIpurl();
				}
				
				// 금일 중복 체크
				if(StringUtils.isNoneEmpty(vo.getIpurl()) && blackListService.selectBlacklistCheck(vo) && !importIpList.contains(tmpIp)) {
					uploadFileList.add(vo);
					importIpList.add(tmpIp);
				}
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// 블랙리스트 Url 엑셀 파일 업로드
	public List<BlackListVO> dataToListBlacklistUrl(File file) {
		// 파일 데이터 담기
		List<BlackListVO> uploadFileList = new ArrayList<BlackListVO>();
		BlackListVO vo = new BlackListVO();

		try {
			// 코드 항목 가져오기
			CodesVO codeVo = new CodesVO();
			codeVo.setCategory("TMAT");
			List<CodesVO> codeList = codesService.selectList(codeVo);
			
			Map<String, String> categoryCodeNameMap = new HashMap<String, String>();
			Map<String, String> codeNameMap = new HashMap<String, String>();
			String name = null;
			for(int i=0; i<codeList.size(); i++) {
				name = codeList.get(i).getName().replaceAll(" ", "");
				codeNameMap.put(name, codeList.get(i).getCode());
			}
			
			codeVo = new CodesVO();
			codeVo.setCategory("SOBT");
			codeList = codesService.selectList(codeVo);
			
			for(int i=0; i<codeList.size(); i++) {
				name = codeList.get(i).getName().replaceAll(" ", "");
				categoryCodeNameMap.put(name, codeList.get(i).getCode());
			}
			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);

			int size = sheet.getLastRowNum();
			
			List<String> importUrlList = new ArrayList<String>();
			
			for (int i = 1; i <= size; i++) {
				vo = new BlackListVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				for(int n=1; n<=7; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 적재 일시는 현재시간이었다가 이젠 입력한 시간으로 업로드
						if(n == 1) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								vo.setRegdate(value);
							}
						}
						
						// 위협 구분
						if(n == 2) {
							if(StringUtils.isNoneEmpty(value) && categoryCodeNameMap.containsKey(value.replaceAll(" ", ""))) {
								vo.setCategorycode(categoryCodeNameMap.get(value.replaceAll(" ", "")));
							}
						}
						// 위협 유형
						else if(n == 3) {
							if(StringUtils.isNoneEmpty(value) && codeNameMap.containsKey(value.replaceAll(" ", ""))) {
								vo.setAttacktypecode(codeNameMap.get(value.replaceAll(" ", "")));
							}
						}
						// URL
						else if(n == 4) {
							vo.setIpurl(value);
						}
						// 사유
						else if(n == 5) {
							vo.setReason(value);
						}
						// 출처
						else if(n == 6) {
							vo.setSource(value);
						}
						// 티켓팅 여부
						else if(n == 7) {
							if(value.equals("Y") || value.equals("N")) {
								vo.setIsticketing(value);
							}
						}
						// 탐지 ID
						else if(n == 8) {
							if(vo.getIsticketing().equals("Y")) {
								try {
									vo.setTicketsidx(Integer.parseInt(value));
								}
								catch(Exception e) {}
							}
						}
					}
				}
				
				vo.setType("url");
				
				// 이쪽 부분. 우선 8보다 작으면 날짜에서 하루 빼고 ipurl을 더해주면 될듯하다. 다른 좋은 방법 있을 지는 생각해봐야할 듯
				String tmpUrl;
				if(Integer.parseInt(vo.getRegdate().split(" ")[1].substring(0, 2)) >= 8) {
					tmpUrl = vo.getRegdate().split(" ")[0] + vo.getIpurl();
				} else {
					Date tmpDate = df.parse(vo.getRegdate().split(" ")[0]);
					Calendar cal = Calendar.getInstance();
					cal.setTime(tmpDate);
					cal.add(Calendar.DATE, -1);
					tmpUrl = df.format(cal.getTime()) + vo.getIpurl();
				}
				
				// 중복 체크
				if(StringUtils.isNoneEmpty(vo.getIpurl()) && blackListService.selectBlacklistCheck(vo) && !importUrlList.contains(tmpUrl)) {
					uploadFileList.add(vo);
					importUrlList.add(tmpUrl);
				}
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// 블랙리스트 Mail 엑셀 파일 업로드
	public List<BlackListVO> dataToListBlacklistMail(File file) {
		// 파일 데이터 담기
		List<BlackListVO> uploadFileList = new ArrayList<BlackListVO>();
		BlackListVO vo = new BlackListVO();

		try {
			// 코드 항목 가져오기
			CodesVO codeVo = new CodesVO();
			codeVo.setCategory("TMAT");
			List<CodesVO> codeList = codesService.selectList(codeVo);
			
			Map<String, String> codeNameMap = new HashMap<String, String>();
			Map<String, String> categoryCodeNameMap = new HashMap<String, String>();
			String name = null;
			for(int i=0; i<codeList.size(); i++) {
				name = codeList.get(i).getName().replaceAll(" ", "");
				codeNameMap.put(name, codeList.get(i).getCode());
			}
			
			codeVo = new CodesVO();
			codeVo.setCategory("SOBT");
			codeList = codesService.selectList(codeVo);
			
			for(int i=0; i<codeList.size(); i++) {
				name = codeList.get(i).getName().replaceAll(" ", "");
				categoryCodeNameMap.put(name, codeList.get(i).getCode());
			}
			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);

			int size = sheet.getLastRowNum();
			
			List<String> importMailList = new ArrayList<String>();
			
			for (int i = 1; i <= size; i++) {
				vo = new BlackListVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				for(int n=1; n<=11; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 적재 일시는 현재 시간 -> 입력된 시간으로 업로드
						if(n == 1) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								vo.setRegdate(value);
							}
						}
						
						// 위협 구분
						if(n == 2) {
							if(StringUtils.isNoneEmpty(value) && categoryCodeNameMap.containsKey(value.replaceAll(" ", ""))) {
								vo.setCategorycode(categoryCodeNameMap.get(value.replaceAll(" ", "")));
							}
						}
						// 위협 유형
						else if(n == 3) {
							if(StringUtils.isNoneEmpty(value) && codeNameMap.containsKey(value.replaceAll(" ", ""))) {
								vo.setAttacktypecode(codeNameMap.get(value.replaceAll(" ", "")));
							}
						}
						// 메일주소
						else if(n == 4) {
							vo.setMail(value);
						}
						// 제목
						else if(n == 5) {
							vo.setMailtitle(value);
						}
						// 첨부파일명
						else if(n == 6) {
							vo.setFilename(value);
						}
						// HASH값
						else if(n == 7) {
							vo.setHash(value);
						}
						// 링크 주소
						else if(n == 8) {
							vo.setLink(value);
						}
						// 사유
						else if(n == 9) {
							vo.setReason(value);
						}
						// 출처
						else if(n == 10) {
							vo.setSource(value);
						}
						// 티켓팅 여부
						else if(n == 11) {
							if(value.equals("Y") || value.equals("N")) {
								vo.setIsticketing(value);
							}
						}
						// 탐지 ID
						else if(n == 12) {
							if(vo.getIsticketing().equals("Y")) {
								try {
									vo.setTicketsidx(Integer.parseInt(value));
								}
								catch(Exception e) {}
							}
						}
					}
				}
				
				vo.setType("mail");
				
				String tmpMail;
				if(Integer.parseInt(vo.getRegdate().split(" ")[1].substring(0, 2)) >= 8) {
					tmpMail = vo.getRegdate().split(" ")[0] + vo.getMail();
				} else {
					Date tmpDate = df.parse(vo.getRegdate().split(" ")[0]);
					Calendar cal = Calendar.getInstance();
					cal.setTime(tmpDate);
					cal.add(Calendar.DATE, -1);
					tmpMail = df.format(cal.getTime()) + vo.getMail();
				}
				
				// 중복 체크
				if(StringUtils.isNoneEmpty(vo.getMail()) && blackListService.selectBlacklistCheck(vo) && !importMailList.contains(tmpMail)) {
					uploadFileList.add(vo);
					importMailList.add(tmpMail);
				}
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// 화이트리스트 IP 엑셀 파일 업로드
	public List<ExceptionListVO> dataToListWhitelistIp(File file) {
		// 파일 데이터 담기
		List<ExceptionListVO> uploadFileList = new ArrayList<ExceptionListVO>();
		ExceptionListVO vo = new ExceptionListVO();
		String[] valueSplit = null;

		try {			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);

			int size = sheet.getLastRowNum();
			
			List<String> importIpList = new ArrayList<String>();

			for (int i = 1; i <= size; i++) {
				vo = new ExceptionListVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				boolean isDateCheck = true;
				for(int n=2; n<=9; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 적재 일시는 현재 시간
						// IP
						if(n == 2) {
							if(value.indexOf("~") > -1) {
								valueSplit = value.split("~");
								if(valueCheckUtil.ipCheck(valueSplit[0]) && valueCheckUtil.ipCheck(valueSplit[1])) {
									vo.setIpurl(value);
								}
							}
							else {
								if(valueCheckUtil.ipCheck(value)) {
									vo.setIpurl(value);	
								}
							}
						}
						// 국가
						else if(n == 3) {
							vo.setNation(value);
						}
						// 사용자
						else if(n == 4) {
							vo.setSource(value);
						}
						// 기관
						else if(n == 5) {
							vo.setOrgan(value);
						}
						// 날짜
						else if(n == 6) {
							// 날짜 2개, 컬럼 1개
							if(value.indexOf("~") > -1) {
								isDateCheck = false;
								
								valueSplit = value.split("~");
								if(valueCheckUtil.dateCheck(valueSplit[0].trim(), "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionstartdate(valueSplit[0].trim());
								}
								if(valueCheckUtil.dateCheck(valueSplit[1].trim(), "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionenddate(valueSplit[1].trim());
								}
							}
							else {
								if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionstartdate(value);
								}
							}
						}
						else if(n == 7) {
							if(!isDateCheck) {
								if(value.equals("자동") || value.equals("Y")) {
									vo.setIsauto("Y");
								}
								else if(value.equals("수동") || value.equals("N")) {
									vo.setIsauto("N");
								}
							}
							else {
								if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionenddate(value);
								}
							}
						}
						else if(n == 8) {
							if(isDateCheck) {
								if(value.equals("자동") || value.equals("Y")) {
									vo.setIsauto("Y");
								}
								else if(value.equals("수동") || value.equals("N")) {
									vo.setIsauto("N");
								}
							}
							else {
								vo.setReason(value);
							}
						}
						else if(isDateCheck && n == 9) {
							vo.setReason(value);
						}
					}
				}
				
				vo.setType("ip");
				
				boolean flag = true;
				if(StringUtils.isNoneEmpty(vo.getIpurl())) {
					for(int n=0; n<importIpList.size(); n++) {
						String ipurl = importIpList.get(n);
						
						if(vo.getIpurl().equals(ipurl)) {
							flag = false;
						}
						else if(ipurl.indexOf("~") > -1) {
							valueSplit = ipurl.split("~");
							long startIp = ValueCheckUtil.ipToLong(InetAddress.getByName(valueSplit[0]));
							long endIp = ValueCheckUtil.ipToLong(InetAddress.getByName(valueSplit[1]));
							
							if(vo.getIpurl().indexOf("~") > -1) {
								valueSplit = vo.getIpurl().split("~");
								long sIp = ValueCheckUtil.ipToLong(InetAddress.getByName(valueSplit[0]));
								long eIp = ValueCheckUtil.ipToLong(InetAddress.getByName(valueSplit[1]));
								
								if(startIp <= sIp && sIp <= endIp) {
									flag = false;
								}
								if(startIp <= eIp && eIp <= endIp) {
									flag = false;
								}
							}
							else {
								long sIp = ValueCheckUtil.ipToLong(InetAddress.getByName(vo.getIpurl()));
								
								if(startIp <= sIp && sIp <= endIp) {
									flag = false;
								}
							}
						}
						else {
							long startIp = ValueCheckUtil.ipToLong(InetAddress.getByName(ipurl));
							
							if(vo.getIpurl().indexOf("~") > -1) {
								valueSplit = vo.getIpurl().split("~");
								long sIp = ValueCheckUtil.ipToLong(InetAddress.getByName(valueSplit[0]));
								long eIp = ValueCheckUtil.ipToLong(InetAddress.getByName(valueSplit[1]));
								
								if(sIp <= startIp && startIp <= eIp) {
									flag = false;
								}
							}
						}
					}
				}
				
				// 화이트 리스트 중복 체크
				if(StringUtils.isNoneEmpty(vo.getIpurl()) && exceptionListService.selectExceptionWhitelListCheck(vo) && flag) {
					// 블랙리스트 삭제
					BlackListVO input = new BlackListVO();
					if(valueCheckUtil.ipRangeValueCheck(vo.getIpurl())) {
						input.setIpurl(vo.getIpurl());
						blackListService.deleteIpRange(input);
					}
					else {
						List<BlackListVO> blackList = new ArrayList<BlackListVO>();
						input.setIpurl(vo.getIpurl());
						blackList.add(input);
						blackListService.deleteIpList(blackList);
					}
					
					uploadFileList.add(vo);
					importIpList.add(vo.getIpurl());
				}
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// 화이트리스트 URL 엑셀 파일 업로드
	public List<ExceptionListVO> dataToListWhitelistUrl(File file) {
		// 파일 데이터 담기
		List<ExceptionListVO> uploadFileList = new ArrayList<ExceptionListVO>();
		ExceptionListVO vo = new ExceptionListVO();
		String[] valueSplit = null;

		try {			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);

			int size = sheet.getLastRowNum();
			
			List<String> importUrlList = new ArrayList<String>();

			for (int i = 1; i <= size; i++) {
				vo = new ExceptionListVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				boolean isDateCheck = true;
				for(int n=2; n<=6; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 적재 일시는 현재 시간
						// URL
						if(n == 2) {
							vo.setIpurl(value);
						}
						// 사용자
						else if(n == 3) {
							vo.setSource(value);
						}
						// 기관
						else if(n == 4) {
							vo.setOrgan(value);
						}
						// 날짜
						else if(n == 5) {
							// 날짜 2개, 컬럼 1개
							if(value.indexOf("~") > -1) {
								isDateCheck = false;
								
								valueSplit = value.split("~");
								if(valueCheckUtil.dateCheck(valueSplit[0].trim(), "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionstartdate(valueSplit[0].trim());
								}
								if(valueCheckUtil.dateCheck(valueSplit[1].trim(), "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionenddate(valueSplit[1].trim());
								}
							}
							else {
								if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionstartdate(value);
								}
							}
						}
						else if(n == 6) {
							if(!isDateCheck) {
								vo.setReason(value);
							}
							else {
								if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionenddate(value);
								}
							}
						}
						else if(isDateCheck && n == 7) {
							vo.setReason(value);
						}
					}
				}
				
				vo.setType("url");
				
				// 화이트 리스트 중복 체크
				if(StringUtils.isNoneEmpty(vo.getIpurl()) && !importUrlList.contains(vo.getIpurl())) {
					uploadFileList.add(vo);
					importUrlList.add(vo.getIpurl());
				}
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// 화이트리스트 Mail 엑셀 파일 업로드
	public List<ExceptionListVO> dataToListWhitelistMail(File file) {
		// 파일 데이터 담기
		List<ExceptionListVO> uploadFileList = new ArrayList<ExceptionListVO>();
		ExceptionListVO vo = new ExceptionListVO();
		String[] valueSplit = null;

		try {			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);

			int size = sheet.getLastRowNum();
			
			List<String> importMailList = new ArrayList<String>();

			for (int i = 1; i <= size; i++) {
				vo = new ExceptionListVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				boolean isDateCheck = true;
				for(int n=2; n<=5; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 적재 일시는 현재 시간
						// Mail
						if(n == 2) {
							vo.setMail(value);
						}
						// 기관
						else if(n == 3) {
							vo.setOrgan(value);
						}
						// 날짜
						else if(n == 4) {
							// 날짜 2개, 컬럼 1개
							if(value.indexOf("~") > -1) {
								isDateCheck = false;
								
								valueSplit = value.split("~");
								if(valueCheckUtil.dateCheck(valueSplit[0].trim(), "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionstartdate(valueSplit[0].trim());
								}
								if(valueCheckUtil.dateCheck(valueSplit[1].trim(), "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionenddate(valueSplit[1].trim());
								}
							}
							else {
								if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionstartdate(value);
								}
							}
						}
						else if(n == 5) {
							if(!isDateCheck) {
								vo.setReason(value);
							}
							else {
								if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
									vo.setExceptionenddate(value);
								}
							}
						}
						else if(isDateCheck && n == 6) {
							vo.setReason(value);
						}
					}
				}
				
				vo.setType("mail");
				
				// 화이트 리스트 중복 체크
				if(StringUtils.isNoneEmpty(vo.getMail()) && !importMailList.contains(vo.getMail())) {
					uploadFileList.add(vo);
					importMailList.add(vo.getMail());
				}
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// 예외 신청 현황 엑셀 파일 업로드
	public List<ExceptionRequestVO> dataToListExceptionrequest(File file) {
		// 파일 데이터 담기
		List<ExceptionRequestVO> uploadFileList = new ArrayList<ExceptionRequestVO>();
		ExceptionRequestVO vo = new ExceptionRequestVO();
		String[] valueSplit = null;

		try {			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);

			XSSFCell cell = null;
			String value = null;

			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(1);

			int size = sheet.getLastRowNum();
			
			List<String> importIpList = new ArrayList<String>();

			for (int i = 1; i <= size; i++) {
				vo = new ExceptionRequestVO();
				row = sheet.getRow(i);

				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				boolean isDateCheck = true;
				for(int n=1; n<=6; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 요청 고객
						if(n == 1) {
							vo.setCustomname(value);
						}
						// 요청 IP
						else if(n == 2) {
							if(valueCheckUtil.ipCheck(value)) {
								vo.setRequestip(value);
							}
						}
						// 요청날짜
						else if(n == 3) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd")) {
								vo.setRequestdate(value);
							}
						}
						// 요청사유
						else if(n == 4) {
							vo.setRequestreason(value);
						}
						// 시작일
						else if(n == 5) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd")) {
								vo.setRequeststart(value);
							}
						}
						// 종료일
						else if(n == 6) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd")) {
								vo.setRequestend(value);
							}
						}
					}
				}
				
				uploadFileList.add(vo);
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// DDoS 차단 현황 엑셀 파일 업로드
	public List<DDoSBlockVO> dataToListDdosblock(File file) {
		// 파일 데이터 담기
		List<DDoSBlockVO> uploadFileList = new ArrayList<DDoSBlockVO>();
		DDoSBlockVO vo = new DDoSBlockVO();

		try {			
			OPCPackage opcPackage = OPCPackage.open(file);
			XSSFWorkbook workbook = new XSSFWorkbook(opcPackage);
			
			XSSFCell cell = null;
			String value = null;
			
			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row = sheet.getRow(3);
			
			int size = sheet.getLastRowNum();

			for (int i = 3; i <= size; i++) {
				vo = new DDoSBlockVO();
				row = sheet.getRow(i);
					
				// 행이 존재하기 않으면 패스
				if (row == null) {
					continue;
				}
				
				for(int n=1; n <= 9; n++) {
					cell = row.getCell(n);
					value = getCellValue(cell);
					
					if(StringUtils.isNoneEmpty(value)) {
						// 탐지장비
						if(n == 1) {
							vo.setDetectequip(value);
						}
						
						// 탐지시간
						else if(n == 2) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								vo.setDetecttime(value);
							}
						}
						// 종료시간
						else if(n == 3) {
							if(valueCheckUtil.dateCheck(value, "yyyy-MM-dd HH:mm:ss")) {
								vo.setFinishtime(value);
							}
						}
						
						// 출발지 IP
						else if(n == 4) {
							if(valueCheckUtil.ipCheck(value)) {
								vo.setSourceip(value);
							}
						}
						
						// 출발지 port
						else if(n == 5) {
							vo.setSourceport(value);
						}
						
						// 목적지 IP
						else if(n == 6) {
							if(valueCheckUtil.ipCheck(value)) {
								vo.setDestinationip(value);
							}
						}
						
						// 목적지 PORT
						else if(n == 7) {
							vo.setDestinationport(value);
						}
						
						// 탐지명
						else if(n == 8) {
							vo.setDetectname(value);
						}
						
						// 차단 사유
						else if(n == 9) {
							vo.setAnalysis(value);
						}
					}
				}
				uploadFileList.add(vo);
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return uploadFileList;
	}
	
	// cell 타입 체크
	private static String getCellValue(Cell cell) {
		String value = null;

		if (cell != null) {
			switch (cell.getCellTypeEnum()) {
			case _NONE:
				break;
			case BLANK:
				break;
			case BOOLEAN:
				value = String.valueOf(cell.getBooleanCellValue());
				break;
			case ERROR:
				value = String.valueOf(cell.getErrorCellValue());
				break;
			case FORMULA:
				value = cell.getCellFormula();
				break;
			case NUMERIC:
				if(HSSFDateUtil.isCellDateFormatted(cell)) {
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					value = sdf.format(cell.getDateCellValue());
				}
				else {
					value = String.valueOf((int) cell.getNumericCellValue());
				}
				break;
			case STRING:
				value = XssPreventer.escape(cell.getStringCellValue());
				break;
			}
		}

		return value;
	}
}






